// API Configuration
const API_URL = 'https://quantri-csdlnn.quangtri.gov.vn/items/APP_URL';
const PROVINCES_API = 'https://quantri-csdlnn.quangtri.gov.vn/items/Provinces';
const WARDS_API = 'https://quantri-csdlnn.quangtri.gov.vn/items/Wards';
const TRONGTROT_REPORT_API = 'https://api-csdlnn.quangtri.gov.vn/api/TTDashboard';
const QLCL_REPORT_API = 'https://api-csdlnn.quangtri.gov.vn/api/QLCLDashboard';
const LAMNGHIEP_API = 'https://api-lamnghiep.hpte.vn/api/Dashboard/';

// Authentication token - b·∫°n c√≥ th·ªÉ thay ƒë·ªïi token n√†y
const API_TOKEN = 'udSUDFzxPH3z4G8qXf2vMQpZUEeT3fw-'; // Token th·ª±c

// Sample data for when API is not available (CORS issue)
const SAMPLE_DATA = {
    "data": [
        {
            "id": 1,
            "status": "published",
            "sort": null,
            "user_created": "225B0ED3-207C-4FDA-BC99-4771AD0D5675",
            "date_created": "2025-06-11T01:12:05.043Z",
            "user_updated": "225B0ED3-207C-4FDA-BC99-4771AD0D5675",
            "date_updated": "2025-06-22T03:10:49.016Z",
            "Name": "Tr·ªìng tr·ªçt v√† B·∫£o v·ªá th·ª±c v·∫≠t",
            "App_images": "C6AB7AC5-DA9C-4135-B78F-9CAC1712F227",
            "App_Url": "https://csdl.hpte.vn",
            "Note": "Chi c·ª•c Tr·ªìng tr·ªçt v√† B·∫£o v·ªá th·ª±c v·∫≠t l√† t·ªï ch·ª©c h√†nh ch√≠nh tr·ª±c thu·ªôc S·ªü N√¥ng nghi·ªáp v√† M√¥i tr∆∞·ªùng, gi√∫p Gi√°m ƒë·ªëc S·ªü tham m∆∞u cho ·ª¶y ban nh√¢n d√¢n t·ªânh th·ª±c hi·ªán ch·ª©c nƒÉng qu·∫£n l√Ω nh√† n∆∞·ªõc chuy√™n ng√†nh v√† t·ªï ch·ª©c th·ª±c thi ph√°p lu·∫≠t v·ªÅ s·∫£n xu·∫•t tr·ªìng tr·ªçt, gi·ªëng c√¢y tr·ªìng n√¥ng nghi·ªáp, s·ª≠ d·ª•ng ƒë·∫•t ƒë·ªÉ s·∫£n xu·∫•t n√¥ng nghi·ªáp, ph√¢n b√≥n, b·∫£o v·ªá th·ª±c v·∫≠t, ki·ªÉm d·ªãch th·ª±c v·∫≠t n·ªôi ƒë·ªãa, thu·ªëc b·∫£o v·ªá th·ª±c v·∫≠t, kh·ª≠ tr√πng v√† qu·∫£n l√Ω d·ªãch v·ª• c√¥ng thu·ªôc ph·∫°m vi lƒ©nh v·ª±c ƒë∆∞·ª£c giao tr√™n ƒë·ªãa b√†n t·ªânh."
        },
        {
            "id": 2,
            "status": "published",
            "sort": null,
            "user_created": "225B0ED3-207C-4FDA-BC99-4771AD0D5675",
            "date_created": "2025-06-17T01:38:36.776Z",
            "user_updated": "225B0ED3-207C-4FDA-BC99-4771AD0D5675",
            "date_updated": "2025-06-22T01:43:30.376Z",
            "Name": "QLCL N√¥ng l√¢m s·∫£n v√† Th·ªßy s·∫£n",
            "App_images": "8ADCD899-16F2-457D-9E23-34507FFA6A82",
            "App_Url": "https://qlcl.hpte.vn",
            "Note": "Chi c·ª•c Qu·∫£n l√Ω ch·∫•t l∆∞·ª£ng N√¥ng L√¢m s·∫£n v√† Th·ªßy s·∫£n Qu·∫£ng Tr·ªã l√† ƒë∆°n v·ªã h√†nh ch√≠nh tr·ª±c thu·ªôc S·ªü N√¥ng nghi·ªáp v√† M√¥i tr∆∞·ªùng t·ªânh Qu·∫£ng Tr·ªã. Chi c·ª•c c√≥ nhi·ªám v·ª• tham m∆∞u, gi√∫p Gi√°m ƒë·ªëc S·ªü th·ª±c hi·ªán ch·ª©c nƒÉng qu·∫£n l√Ω nh√† n∆∞·ªõc chuy√™n ng√†nh v√† t·ªï ch·ª©c th·ª±c thi ph√°p lu·∫≠t v·ªÅ ch·∫•t l∆∞·ª£ng, an to√†n th·ª±c ph·∫©m trong c√°c lƒ©nh v·ª±c n√¥ng, l√¢m, th·ªßy s·∫£n v√† mu·ªëi t·∫°i ƒë·ªãa ph∆∞∆°ng."
        },
        {
            "id": 4,
            "status": "published",
            "sort": null,
            "user_created": "225B0ED3-207C-4FDA-BC99-4771AD0D5675",
            "date_created": "2025-06-17T11:19:10.106Z",
            "user_updated": "225B0ED3-207C-4FDA-BC99-4771AD0D5675",
            "date_updated": "2025-06-19T23:51:52.273Z",
            "Name": "ChƒÉn nu√¥i, Th√∫ y v√† Th·ªßy s·∫£n",
            "App_images": "C6AB7AC5-DA9C-4135-B78F-9CAC1712F227",
            "App_Url": "https://channuoi.azurewebsites.net",
            "Note": "Chi c·ª•c ChƒÉn nu√¥i, Th√∫ y v√† Th·ªßy s·∫£n l√† t·ªï ch·ª©c tr·ª±c thu·ªôc S·ªü N√¥ng nghi·ªáp v√† M√¥i tr∆∞·ªùng, gi√∫p Gi√°m ƒë·ªëc S·ªü N√¥ng nghi·ªáp v√† M√¥i tr∆∞·ªùng tham m∆∞u v·ªõi ·ª¶y ban nh√¢n d√¢n t·ªânh th·ª±c hi·ªán ch·ª©c nƒÉng qu·∫£n l√Ω nh√† n∆∞·ªõc chuy√™n ng√†nh v√† t·ªï ch·ª©c th·ª±c thi ph√°p lu·∫≠t v·ªÅ chƒÉn nu√¥i, th√∫ y v√† th·ªßy s·∫£n tr√™n ƒë·ªãa b√†n t·ªânh."
        },
        {
            "id": 7,
            "status": "published",
            "sort": null,
            "user_created": "225B0ED3-207C-4FDA-BC99-4771AD0D5675",
            "date_created": "2025-06-22T01:40:18.686Z",
            "user_updated": null,
            "date_updated": null,
            "Name": "L√¢m nghi·ªáp",
            "App_images": "C6AB7AC5-DA9C-4135-B78F-9CAC1712F227",
            "App_Url": "https://csdl-lamnghiep.quangtri.gov.vn",
            "Note": "C∆° s·ªü d·ªØ li·ªáu L√¢m nghi·ªáp ƒë·ªãa b√†n Qu·∫£ng Tr·ªã"
        },
        {
            "id": 8,
            "status": "published",
            "sort": null,
            "user_created": "225B0ED3-207C-4FDA-BC99-4771AD0D5675",
            "date_created": "2025-06-22T01:41:04.520Z",
            "user_updated": null,
            "date_updated": null,
            "Name": "Thu·ª∑ s·∫£n",
            "App_images": "C6AB7AC5-DA9C-4135-B78F-9CAC1712F227",
            "App_Url": "https://csdl-thuysan.quangtri.gov.vn/",
            "Note": "C∆° s·ªü d·ªØ li·ªáu Thu·ª∑ s·∫£n"
        },
        {
            "id": 9,
            "status": "published",
            "sort": null,
            "user_created": "225B0ED3-207C-4FDA-BC99-4771AD0D5675",
            "date_created": "2025-06-22T01:42:56.696Z",
            "user_updated": null,
            "date_updated": null,
            "Name": "ƒêi·ªÅu h√†nh",
            "App_images": "C6AB7AC5-DA9C-4135-B78F-9CAC1712F227",
            "App_Url": "https://quantri-csdlnn.quangtri.gov.vn",
            "Note": "Gi·ªõi thi·ªáu h·ªá th·ªëng d·ªØ li·ªáu d√πng chung ‚Äì N·ªÅn t·∫£ng k·∫øt n·ªëi v√† chia s·∫ª th√¥ng minh! ‚úîÔ∏è T·∫≠p trung, chu·∫©n h√≥a v√† ƒë·ªìng b·ªô d·ªØ li·ªáu gi·ªØa c√°c ƒë∆°n v·ªã. üîí B·∫£o m·∫≠t cao, ph√¢n quy·ªÅn r√µ r√†ng, ƒë·∫£m b·∫£o an to√†n th√¥ng tin. üîÑ K·∫øt n·ªëi linh ho·∫°t, h·ªó tr·ª£ li√™n th√¥ng nhi·ªÅu h·ªá th·ªëng kh√°c nhau. üìä T·ªëi ∆∞u khai th√°c d·ªØ li·ªáu, h·ªó tr·ª£ ra quy·∫øt ƒë·ªãnh ch√≠nh x√°c, nhanh ch√≥ng."
        }
    ]
};

const TRONGTROT_REPORT_FAKE_DATA = {
    "data": [
      {
        "coSoSanXuatPhanBonCount": 5,
        "coSoDuDieuKienBuonBanPhanBonCount": 10,
        "coSoSanXuatThuocBVTVCount": 7,
        "coSoKinhDoanhThuocBVTVCount": 10,
        "viPhamSanXuatKinhDoanhThuocBVTVCount": 11,
        "dienTichThietHaiDoThienTaiDichBenh": {
          "series": [51, 45, 20, 31, 193, 140, 20, 269],
          "labels": [
            "ƒê·ªông ƒë·∫•t",
            "H·∫°n h√°n",
            "L≈© l·ª•t",
            "S√≥ng th·∫ßn",
            "Leptosphaeria maculans",
            "Phytophthora infestans",
            "Plasmodiophora brassicae",
            "Xanthomonas oryzae"
          ],
          "colors": [
            "#FF6384",
            "#36A2EB",
            "#FFCE56",
            "#4BC0C0",
            "#9966FF",
            "#FF9F40",
            "#C9CBCF",
            "#FF6384"
          ]
        },
        "sanLuongThietHaiDoThienTaiDichBenh": {
          "series": [326, 555, 70, 67],
          "labels": [
            "ƒê·ªông ƒë·∫•t",
            "H·∫°n h√°n",
            "L≈© l·ª•t",
            "S√≥ng th·∫ßn"
          ],
          "colors": [
            "#FF6384",
            "#36A2EB",
            "#FFCE56",
            "#4BC0C0"
          ]
        }
      }
    ],
    "meta": {
      "total_count": 1,
      "filter_count": 1,
      "page": null,
      "page_count": 1,
      "limit": 10,
      "offset": 0,
      "fields": null,
      "sort": [
        "-thang"
      ],
      "filter": {
        "fromDate": null,
        "toDate": null
      }
    },
    "errors": [],
    "isSuccess": true,
    "message": "",
    "statusCode": 200
}

const QLCL_REPORT_FAKE_DATA = {
    "data": [
      {
        "so_luong_co_so": 13,
        "so_luong_co_so_dat_chung_nhan": 22,
        "so_luong_vu_vi_pham": 9,
        "so_dot_kiem_tra": 2,
        "loai_hinh_co_so": [
          {
            "code": "LHCS05",
            "name": "C∆° s·ªü ch·∫ø bi·∫øn l√¢m s·∫£n",
            "so_luong_co_so": 0
          },
          {
            "code": "LHCS02",
            "name": "C∆° s·ªü ch·∫ø bi·∫øn th·ªßy s·∫£n",
            "so_luong_co_so": 1
          },
          {
            "code": "LHCS01",
            "name": "C∆° s·ªü ch·∫ø bi·∫øn t·ªïng h·ª£p",
            "so_luong_co_so": 12
          },
          {
            "code": "LHCS04",
            "name": "C∆° s·ªü kinh doanh th·ª±c ph·∫©m n√¥ng s·∫£n",
            "so_luong_co_so": 0
          },
          {
            "code": "LHCS03",
            "name": "C∆° s·ªü s·∫£n xu·∫•t n√¥ng s·∫£n",
            "so_luong_co_so": 0
          },
          {
            "code": "LHCS0643",
            "name": "C∆° s·ªü s∆° ch·∫ø ban ƒë·∫ßu",
            "so_luong_co_so": 0
          }
        ],
        "gcn_sap_het_han": [
          {
            "id": 19,
            "name": "C∆° s·ªü s·∫£n xu·∫•t b√°nh l·ªçc An Kh√™ - H·∫£i LƒÉng",
            "so_giay_chung_nhan": "CN-ATTP-031",
            "ngay_het_hieu_luc": "2025-08-13T00:00:00",
            "so_ngay_con_lai": 17
          }
        ],
        "so_dot_kiem_tra_theo_thang": [
          {
            "t1": 0,
            "t2": 0,
            "t3": 0,
            "t4": 0,
            "t5": 0,
            "t6": 1,
            "t7": 1,
            "t8": 0,
            "t9": 0,
            "t10": 0,
            "t11": 0,
            "t12": 0
          }
        ]
      }
    ],
    "meta": {
      "total_count": 1,
      "filter_count": 1,
      "page": null,
      "page_count": 1,
      "limit": 10,
      "offset": 0,
      "fields": null,
      "sort": [
        "-thang"
      ],
      "filter": {
        "fromDate": null,
        "toDate": null
      }
    },
    "errors": [],
    "isSuccess": true,
    "message": "",
    "statusCode": 200
}

// DOM Elements
const loadingElement = document.getElementById('loading');
const errorElement = document.getElementById('error');
const modulesGridElement = document.getElementById('modulesGrid');
const modulesContainerElement = document.getElementById('modulesContainer');
const retryBtn = document.getElementById('retryBtn');
const provinceSelect = document.getElementById('provinceSelect');
const wardSelect = document.getElementById('wardSelect');

// Module icons mapping
const moduleIcons = {
    'Tr·ªìng tr·ªçt v√† B·∫£o v·ªá th·ª±c v·∫≠t': 'fas fa-seedling',
    'QLCL N√¥ng l√¢m s·∫£n v√† Th·ªßy s·∫£n': 'fas fa-award',
    'ChƒÉn nu√¥i, Th√∫ y v√† Th·ªßy s·∫£n': 'fas fa-paw',
    'L√¢m nghi·ªáp': 'fas fa-tree',
    'Thu·ª∑ s·∫£n': 'fas fa-fish',
    'ƒêi·ªÅu h√†nh': 'fas fa-cogs'
};

// Function to get API headers with authentication
function getApiHeaders() {
    const headers = {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
    };
    
    // Add authorization header if token is provided
    if (API_TOKEN && API_TOKEN !== 'YOUR_API_TOKEN_HERE') {
        headers['Authorization'] = `Bearer ${API_TOKEN}`;
        // Alternative formats for different API types:
        // headers['X-API-Key'] = API_TOKEN;
        // headers['X-Auth-Token'] = API_TOKEN;
    }
    
    return headers;
}

// Convert date string from YYYY-MM-DD (input[type="date"]) to DD/MM/YYYY for API
function toDDMMYYYY(dateString) {
    if (!dateString) return '';
    const parts = dateString.split('-');
    if (parts.length !== 3) return dateString;
    const [year, month, day] = parts;
    return `${day}/${month}/${year}`;
}

// Build query string from key-value object, ignoring null/undefined/empty values
function buildQueryString(params) {
    const query = Object.entries(params)
        .filter(([, value]) => value !== undefined && value !== null && value !== '')
        .map(([key, value]) => `${encodeURIComponent(key)}=${encodeURIComponent(String(value))}`)
        .join('&');
    return query ? `?${query}` : '';
}

// Small wrapper to fetch JSON with shared headers
async function fetchJson(url) {
    const response = await fetch(url, {
        method: 'GET',
        headers: getApiHeaders(),
    });
    if (!response.ok) {
        throw new Error(`HTTP error ${response.status} for ${url}`);
    }
    return response.json();
}

// Format Date object to YYYY-MM-DD for input[type="date"]
function formatDateForInput(date) {
    const yyyy = date.getFullYear();
    const mm = String(date.getMonth() + 1).padStart(2, '0');
    const dd = String(date.getDate()).padStart(2, '0');
    return `${yyyy}-${mm}-${dd}`;
}

// Get default date range: from = today - 3 months, to = today
function getDefaultLast3MonthsRange() {
    const to = new Date();
    const from = new Date(to);
    from.setMonth(from.getMonth() - 3);
    return { from, to };
}

// Set default date inputs for dashboard filters
function setDefaultDashboardDateRange() {
    const fromInput = document.getElementById('fromDate');
    const toInput = document.getElementById('toDate');
    if (!fromInput || !toInput) return;
    const { from, to } = getDefaultLast3MonthsRange();
    toInput.value = formatDateForInput(to);
    fromInput.value = formatDateForInput(from);
}

// Call: /GetThongKeDuLieuLamNghiep with FromDate/ToDate
async function fetchLamNghiepDashboard(fromDate, toDate) {
    const f = toDDMMYYYY(fromDate);
    const t = toDDMMYYYY(toDate);
    console.log(f);
    const base = 'https://api-lamnghiep.hpte.vn/api/Dashboard/GetThongKeDuLieuLamNghiep';
    const url = base + buildQueryString({ FromDate:"01/01/2015", ToDate: t });
    return fetchJson(url);
}

// Call: /GetThongTinSuDungRung/{typeId}
async function fetchThongTinSuDungRung(typeId, options) {
    const {
        provinceId = 0,
        districtId = 0,
        year = 0,
        month = 0,
        fromDate,
        toDate,
        isCompareWithPrevMonth = false,
    } = options || {};


    const f = toDDMMYYYY(fromDate);
    const t = toDDMMYYYY(toDate);
    const base = `https://api-lamnghiep.hpte.vn/api/Dashboard/GetThongTinSuDungRung/${typeId}`;
    const url = base + buildQueryString({
        ProvinceId: 0,
        DistrictId: 0,
        Year: 0,
        Month: 0,
        FromDate: f,
        ToDate: t,
        IsCompareWithPrevMonth: isCompareWithPrevMonth,
    });
    return fetchJson(url);
}

// Call all 4 forestry APIs in parallel based on FromDate/ToDate
async function fetchForestryApis(fromDate, toDate, options) {
    // typeIds 0, 3, 2 as per provided URLs
    const common = {
        provinceId: options?.provinceId ?? 0,
        districtId: options?.districtId ?? 0,
        provinceCode: options?.provinceCode ?? '',
        wardCode: options?.wardCode ?? '',
        year: options?.year ?? 0,
        month: options?.month ?? 0,
        fromDate,
        toDate,
        isCompareWithPrevMonth:  false,
    };
    
    const [summary, suDungRung0, suDungRung3, suDungRung2] = await Promise.all([
        fetchLamNghiepDashboard(fromDate, toDate),
        fetchThongTinSuDungRung(0, common),
        fetchThongTinSuDungRung(3, common),
        fetchThongTinSuDungRung(2, common),
    ]);

    return {
        summary,
        suDungRung0,
        suDungRung3,
        suDungRung2,
    };
}

// Function to check if token is configured
function isTokenConfigured() {
    return API_TOKEN && API_TOKEN !== 'YOUR_API_TOKEN_HERE';
}

// Show info message about using sample data
function showInfoMessage(message) {
    // Remove existing info message if any
    const existingInfo = document.querySelector('.info-message');
    if (existingInfo) {
        existingInfo.remove();
    }
    
    // Create info message element
    const infoElement = document.createElement('div');
    infoElement.className = 'info-message';
    infoElement.innerHTML = `
        <div class="info-content">
            <i class="fas fa-info-circle"></i>
            <span>${message}</span>
            <button class="info-close" onclick="this.parentElement.parentElement.remove()">
                <i class="fas fa-times"></i>
            </button>
        </div>
    `;
    
    // Insert after header
    const header = document.querySelector('.header');
    header.parentNode.insertBefore(infoElement, header.nextSibling);
    
    // Auto remove after 15 seconds
    setTimeout(() => {
        if (infoElement.parentNode) {
            infoElement.remove();
        }
    }, 15000);
}

// Check CORS status and show appropriate message
function checkCorsStatus() {
    const currentDomain = window.location.origin;
    const apiDomain = new URL(API_URL).origin;
    
    console.log('üåê Current domain:', currentDomain);
    console.log('üîó API domain:', apiDomain);
    console.log('üîë Token configured:', isTokenConfigured() ? 'Yes' : 'No');
    
    if (currentDomain !== apiDomain) {
        console.log('‚ö†Ô∏è Cross-origin request detected');
        return {
            isCrossOrigin: true,
            currentDomain: currentDomain,
            apiDomain: apiDomain,
            hasToken: isTokenConfigured()
        };
    }
    
    return {
        isCrossOrigin: false,
        currentDomain: currentDomain,
        apiDomain: apiDomain,
        hasToken: isTokenConfigured()
    };
}

// Initialize CORS check
document.addEventListener('DOMContentLoaded', function() {
    const corsStatus = checkCorsStatus();
    // Set default date range: today as ToDate, 3 months ago as FromDate
    setDefaultDashboardDateRange();
    
    if (corsStatus.isCrossOrigin) {
        console.log('üîí Cross-origin setup detected. CORS errors may occur.');
        console.log('üí° To fix CORS issues:');
        console.log('   1. Configure CORS headers on the API server');
        console.log('   2. Use a proxy server');
        console.log('   3. Deploy frontend and API on the same domain');
        
        if (corsStatus.hasToken) {
            console.log('üîë Token authentication is configured - this may help with CORS');
        } else {
            console.log('‚ö†Ô∏è No token configured - consider adding API token for better access');
        }
    }
    
    loadModules();
    loadProvinces();
    setupEventListeners();
    setupTabEvents();
});



// Setup event listeners
function setupEventListeners() {
    retryBtn.addEventListener('click', loadModules);
    
    // Province change event
    provinceSelect.addEventListener('change', function() {
        const selectedProvince = this.value;
        if (selectedProvince) {
            loadWards(selectedProvince);
        } else {
            resetWardSelect();
        }
    });
}

// Populate province select
function populateProvinceSelect(provinces) {
    provinceSelect.innerHTML = '<option value="">Ch·ªçn t·ªânh/th√†nh ph·ªë</option>';
    let foundQuangTri = false;
    provinces.forEach(province => {
        const option = document.createElement('option');
        option.value = province.id;
        option.textContent = province.name;
        option.setAttribute('data-code', province.code || '');
        if (province.name.toLowerCase().includes('qu·∫£ng tr·ªã')) {
            option.selected = true;
            foundQuangTri = true;
            loadWards(province.id);
        }
        provinceSelect.appendChild(option);
    });
    // N·∫øu kh√¥ng c√≥ Qu·∫£ng Tr·ªã, gi·ªØ m·∫∑c ƒë·ªãnh
    if (!foundQuangTri && provinces.length > 0) {
        provinceSelect.selectedIndex = 1;
    }
}



// Fake data cho dashboard
const DASHBOARD_FAKE_DATA = {
    agriculture: province => `S·∫£n l∆∞·ª£ng l√∫a t·∫°i ${province}: 120.000 t·∫•n, di·ªán t√≠ch 30.000 ha` ,
    forestry: province => `Di·ªán t√≠ch r·ª´ng tr·ªìng t·∫°i ${province}: 50.000 ha, t·ª∑ l·ªá che ph·ªß 48%` ,
    fishery: province => `S·∫£n l∆∞·ª£ng th·ªßy s·∫£n t·∫°i ${province}: 15.000 t·∫•n, t√†u c√°: 1.200 chi·∫øc` ,
    livestock: province => `T·ªïng ƒë√†n gia s√∫c t·∫°i ${province}: 200.000 con, s·∫£n l∆∞·ª£ng th·ªãt: 10.000 t·∫•n` ,
    quality: province => `S·ªë c∆° s·ªü ƒë·∫°t chu·∫©n ch·∫•t l∆∞·ª£ng t·∫°i ${province}: 120, s·∫£n ph·∫©m OCOP: 35` ,
};

// Hi·ªÉn th·ªã fake data dashboard
function showDashboardFakeData(tabType) {
    const provinceId= provinceSelect.options[provinceSelect.selectedIndex]?.value || '1';
    const wardId= wardSelect.options[wardSelect.selectedIndex]?.value || null;
    const provinceCode= provinceSelect.options[provinceSelect.selectedIndex]?.getAttribute('data-code') || null;
    const wardCode= wardSelect.options[wardSelect.selectedIndex]?.getAttribute('data-code') || null;
    const fromDate= document.getElementById('fromDate').value || null;
    const toDate= document.getElementById('toDate').value || null;
    renderDashboardSubContent(tabType, fromDate, toDate, provinceId, wardId, provinceCode, wardCode);
}

async function renderDashboardSubContent(tabType, fromDate, toDate, province, ward, provinceCode, wardCode) {
    const subContent = document.getElementById('dashboardSubContent');
    subContent.innerHTML = '';
    // X√≥a chart c≈© n·∫øu c√≥
    if (dashboardChartInstance) {
        dashboardChartInstance.destroy();
        dashboardChartInstance = null;
    }
    document.getElementById('div-ward').setAttribute('style', 'display:flex;');
    document.getElementById('div-province').setAttribute('style', 'display:flex;');

    // Render t·ª´ng dashboard con theo tab
    if (tabType === 'agriculture') {
        let appendUrl = false;
        let url = TRONGTROT_REPORT_API + '?';
        if(province != null){
            url += `province=${province}`;
            appendUrl= true;
        }
        if(ward != null){
            if(appendUrl){
                url += '&';
            }
            url += `wards=${ward}`;
            appendUrl= true;
        }
        if(fromDate != null){
            if(appendUrl){
                url += '&';
            }
            url += `fromDate=${fromDate}`;
            appendUrl= true;
        }
        if(toDate != null){
            if(appendUrl){
                url += '&';
            }
            url += `toDate=${toDate}`;
        }
        const response = await fetch(url, {
            method: 'GET',
            headers: getApiHeaders(),
        });

        const data = await response.json();

        const dataReport = data.data.length > 0 ? data.data[0] : null;

        if (dataReport) 
        {
            subContent.innerHTML = `
            <div class="dashboard-cards-row">
                <div class="dashboard-card agriculture"><div class="card-icon"><i class="fas fa-industry"></i></div><div class="card-title">T·ªïng s·ªë c∆° s·ªü SX ph√¢n b√≥n</div><div class="card-value">${dataReport.coSoSanXuatPhanBonCount}</div></div>
                <div class="dashboard-card agriculture"><div class="card-icon"><i class="fas fa-store"></i></div><div class="card-title">T·ªïng s·ªë c∆° s·ªü kinh doanh ph√¢n b√≥n</div><div class="card-value">${dataReport.coSoDuDieuKienBuonBanPhanBonCount}</div></div>
                <div class="dashboard-card agriculture"><div class="card-icon"><i class="fas fa-flask"></i></div><div class="card-title">T·ªïng s·ªë c∆° s·ªü SX thu·ªëc BVTV</div><div class="card-value">${dataReport.coSoSanXuatThuocBVTVCount}</div></div>
                <div class="dashboard-card agriculture"><div class="card-icon"><i class="fas fa-prescription-bottle"></i></div><div class="card-title">T·ªïng c∆° s·ªü kinh doanh thu·ªëc BVTV</div><div class="card-value">${dataReport.coSoKinhDoanhThuocBVTVCount}</div></div>
                <div class="dashboard-card agriculture"><div class="card-icon"><i class="fas fa-exclamation-triangle"></i></div><div class="card-title">T·ªïng s·ªë c∆° s·ªü vi ph·∫°m SXKD BVTV</div><div class="card-value">${dataReport.viPhamSanXuatKinhDoanhThuocBVTVCount}</div></div>
            </div>
            <div class="dashboard-charts-row" style="display:flex;gap:24px;">
                <div style="flex:1;background:#fff;border-radius:12px;padding:18px;">
                    <canvas id="agriChart1"></canvas>
                </div>
                <div style="flex:1;background:#fff;border-radius:12px;padding:18px;">
                    <canvas id="agriChart2"></canvas>
                </div>
            </div>`;
        }

        setTimeout(() => {
            new Chart(document.getElementById('agriChart1').getContext('2d'), {
                type: 'doughnut',
                data: {
                    labels: dataReport ? dataReport.dienTichThietHaiDoThienTaiDichBenh.labels : ['ƒê·ªông ƒë·∫•t', 'S√≥ng th·∫ßn', 'L≈© l·ª•t', 'H·∫°n h√°n', 'Phytophthora infestans', 'Leptosphaeria maculans', 'Xanthomonas oryzae', 'Plasmodiophora brassicae'],
                    datasets: [{
                        data: dataReport ? dataReport.dienTichThietHaiDoThienTaiDichBenh.series : [6.6, 4.0, 5.9, 18.2, 25.1, 35.0, 4.0, 1.2],
                        backgroundColor: dataReport ? dataReport.dienTichThietHaiDoThienTaiDichBenh.colors : ['#f66', '#6cf', '#fc6', '#6fc', '#a6f', '#ccc', '#f90', '#f9c'],
                    }]
                },
                options: {
                    plugins: {
                        legend: { position: 'bottom' },
                        title: { display: true, text: 'T·ªïng S·ªë Di·ªán T√≠ch (Ha) Thi·ªát H·∫°i Do Thi√™n Tai/Do D·ªãch B·ªánh', font: { size: 16 } }
                    }
                }
            });
            new Chart(document.getElementById('agriChart2').getContext('2d'), {
                type: 'doughnut',
                data: {
                    labels: dataReport ? dataReport.sanLuongThietHaiDoThienTaiDichBenh.labels : ['ƒê·ªông ƒë·∫•t', 'S√≥ng th·∫ßn', 'L≈© l·ª•t', 'H·∫°n h√°n'],
                    datasets: [{
                        data: dataReport ? dataReport.sanLuongThietHaiDoThienTaiDichBenh.series : [32, 6.6, 6.9, 54.5],
                        backgroundColor: dataReport ? dataReport.sanLuongThietHaiDoThienTaiDichBenh.colors : ['#f66', '#6cf', '#fc6', '#6fc'],
                    }]
                },
                options: {
                    plugins: {
                        legend: { position: 'bottom' },
                        title: { display: true, text: 'T·ªïng S·ªë S·∫£n L∆∞·ª£ng(Ha) Thi·ªát H·∫°i Do Thi√™n Tai/Do D·ªãch B·ªánh', font: { size: 16 } }
                    }
                }
            });
        }, 100);
    } else if (tabType === 'forestry') {
        try {
            const results = await fetchForestryApis(fromDate, toDate, {
                provinceCode: provinceCode,
                wardCode: wardCode,
            });

            if(results.summary != null)
            {
                subContent.innerHTML = `
                    <div class="dashboard-cards-row">
                        <div class="dashboard-card forestry"><div class="card-title">T·ªîNG DI·ªÜN T√çCH R·ª™NG (HA)</div><div class="card-value">${results.summary.tongDienTichRung}</div></div>
                        <div class="dashboard-card forestry"><div class="card-title">T·ªîNG LO√ÄI ƒê·ªòNG V·∫¨T</div><div class="card-value">${results.summary.tongSoLoaiDongVat}</div></div>
                        <div class="dashboard-card forestry"><div class="card-title">T·ªîNG S·ªê LO√ÄI TH·ª∞C V·∫¨T</div><div class="card-value">${results.summary.tongSoLoaiThucVat}</div></div>
                        <div class="dashboard-card forestry"><div class="card-title">T·ªîNG S·ªê LO√ÄI NGUY C·∫§P</div><div class="card-value">${results.summary.tongSoLoaiNguyCap}</div></div>
                    </div>
                    <div class="dashboard-charts-row" style="display:flex;gap:24px;">
                        <div style="flex:1;background:#e8f5e9;border-radius:12px;padding:18px;">
                            <canvas id="forestChart1"></canvas>
                        </div>
                        <div style="flex:1;background:#e8f5e9;border-radius:12px;padding:18px;">
                            <canvas id="forestChart2"></canvas>
                        </div>
                        <div style="flex:1;background:#e8f5e9;border-radius:12px;padding:18px;">
                            <canvas id="forestChart3"></canvas>
                        </div>
                    </div>`;
                setTimeout(() => {
                    let colors = [
                        '#65AC85', // xanh l√° nh·∫°t
                        '#5FB3EC', // xanh d∆∞∆°ng s√°ng
                        '#FAD577', // v√†ng nh·∫°t
                        '#E5F3EB', // xanh ng·ªçc r·∫•t nh·∫°t
                        '#F5F5F5', // tr·∫Øng x√°m
                        '#3B6E4F', // xanh r·ª´ng gi√†
                        '#8C6A43', // n√¢u g·ªó
                        '#A7C957', // xanh l√° non
                        '#CCD5AE', // xanh r√™u nh·∫°t
                        '#2F4858'  // xanh x√°m than
                      ];
                    if(results.suDungRung0[0] != 'Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu!'){
                        new Chart(document.getElementById('forestChart1').getContext('2d'), {
                            type: 'pie',
                            data: {
                                labels: results.suDungRung0.map(item => item.label),
                                datasets: [{
                                    data: results.suDungRung0.map(item => item.value),
                                    backgroundColor: colors.slice(0, results.suDungRung0.length),
                                }]
                            },
                            options: {
                                plugins: {
                                    legend: { position: 'bottom' },
                                    title: { display: true, text: 'T·ª∑ l·ªá di·ªán t√≠ch r·ª´ng theo m·ª•c ƒë√≠ch s·ª≠ d·ª•ng (HA)', font: { size: 14 } }
                                }
                            }
                        });
                    }

                    if(results.suDungRung3[0] != 'Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu!'){
                    new Chart(document.getElementById('forestChart2').getContext('2d'), {
                        type: 'pie',
                        data: {
                            labels: results.suDungRung3.map(item => item.label),
                            datasets: [{
                                data: results.suDungRung3.map(item => item.value),
                                backgroundColor: colors.slice(0, results.suDungRung3.length),
                            }]
                        },
                        options: {
                            plugins: {
                                legend: { position: 'bottom' },
                                title: { display: true, text: 'T·ª∑ l·ªá di·ªán t√≠ch r·ª´ng theo ngu·ªìn g·ªëc r·ª´ng (HA)', font: { size: 14 } }
                            }
                        }
                    });
                    }

                    if(results.suDungRung2[0] != 'Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu!'){
                        new Chart(document.getElementById('forestChart3').getContext('2d'), {
                        type: 'pie',
                        data: {
                            labels: results.suDungRung2.map(item => item.label),
                            datasets: [{
                                data: results.suDungRung2.map(item => item.value),
                                backgroundColor: colors.slice(0, results.suDungRung2.length),
                            }]
                        },
                        options: {
                            plugins: {
                                legend: { position: 'bottom' },
                                title: { display: true, text: 'T·ª∑ l·ªá di·ªán t√≠ch r·ª´ng theo ch·ª©c nƒÉng r·ª´ng (HA)', font: { size: 14 } }
                            }
                        }
                    });
                    }
                }, 100);
            }
        } catch (err) {
            console.warn('‚ö†Ô∏è L·ªói khi g·ªçi API L√¢m nghi·ªáp:', err);
        }

    } else if (tabType === 'fishery') {
        subContent.innerHTML = `
        <div class="dashboard-cards-row">
            <div class="dashboard-card fishery"><div class="card-title">C∆° s·ªü ch·∫ø bi·∫øn l√¢m s·∫£n</div><div class="card-value">2</div></div>
            <div class="dashboard-card fishery"><div class="card-title">C∆° s·ªü ch·∫ø bi·∫øn th·ªßy s·∫£n</div><div class="card-value">1</div></div>
            <div class="dashboard-card fishery"><div class="card-title">C∆° s·ªü ch·∫ø bi·∫øn t·ªïng h·ª£p</div><div class="card-value">12</div></div>
        </div>
        <div class="dashboard-charts-row" style="display:flex;gap:24px;">
            <div style="flex:1;background:#fff;border-radius:12px;padding:18px;">
                <canvas id="fisheryChart1"></canvas>
            </div>
            <div style="flex:1;background:#fff;border-radius:12px;padding:18px;">
                <canvas id="fisheryChart2"></canvas>
            </div>
        </div>`;
        setTimeout(() => {
            new Chart(document.getElementById('fisheryChart1').getContext('2d'), {
                type: 'bar',
                data: {
                    labels: ['C∆° s·ªü ch·∫ø bi·∫øn l√¢m s·∫£n', 'C∆° s·ªü ch·∫ø bi·∫øn th·ªßy s·∫£n', 'C∆° s·ªü ch·∫ø bi·∫øn t·ªïng h·ª£p'],
                    datasets: [{
                        label: 'S·ªë l∆∞·ª£t ki·ªÉm tra theo th√°ng',
                        data: [2, 1, 12],
                        backgroundColor: '#4caf50',
                    }]
                },
                options: {
                    plugins: {
                        legend: { display: false },
                        title: { display: true, text: 'S·ªë l∆∞·ª£t ki·ªÉm tra theo th√°ng', font: { size: 16 } }
                    },
                    scales: { y: { beginAtZero: true } }
                }
            });
            new Chart(document.getElementById('fisheryChart2').getContext('2d'), {
                type: 'bar',
                data: {
                    labels: ['C∆° s·ªü s·∫£n xu·∫•t gi·ªëng', 'C∆° s·ªü nu√¥i tr·ªìng'],
                    datasets: [{
                        label: 'S·∫£n l∆∞·ª£ng gi·ªëng',
                        data: [4.5, 1],
                        backgroundColor: '#42a5f5',
                    }]
                },
                options: {
                    plugins: {
                        legend: { display: false },
                        title: { display: true, text: 'S·∫£n l∆∞·ª£ng gi·ªëng', font: { size: 16 } }
                    },
                    scales: { y: { beginAtZero: true } }
                }
            });
        }, 100);
    } else if (tabType === 'livestock') {
        subContent.innerHTML = `
        <div class="dashboard-cards-row">
            <div class="dashboard-card livestock"><div class="card-title">C∆° s·ªü nu√¥i l·ª£n</div><div class="card-value">0</div></div>
            <div class="dashboard-card livestock"><div class="card-title">C∆° s·ªü nu√¥i b√≤</div><div class="card-value">4</div></div>
            <div class="dashboard-card livestock"><div class="card-title">C∆° s·ªü nu√¥i tr√¢u</div><div class="card-value">2</div></div>
            <div class="dashboard-card livestock"><div class="card-title">C∆° s·ªü nu√¥i d√™</div><div class="card-value">0</div></div>
            <div class="dashboard-card livestock"><div class="card-title">C∆° s·ªü nu√¥i g√†</div><div class="card-value">0</div></div>
            <div class="dashboard-card livestock"><div class="card-title">C∆° s·ªü nu√¥i v·ªãt</div><div class="card-value">2</div></div>
        </div>
        <div class="dashboard-charts-row" style="display:flex;gap:24px;">
            <div style="flex:1;background:#fff;border-radius:12px;padding:18px;">
                <canvas id="livestockChart1"></canvas>
            </div>
            <div style="flex:1;background:#fff;border-radius:12px;padding:18px;">
                <canvas id="livestockChart2"></canvas>
            </div>
        </div>`;
        setTimeout(() => {
            new Chart(document.getElementById('livestockChart1').getContext('2d'), {
                type: 'bar',
                data: {
                    labels: ['N√¥ng h·ªô', 'Trang tr·∫°i nh·ªè', 'Trang tr·∫°i v·ª´a', 'Trang tr·∫°i l·ªõn'],
                    datasets: [{
                        label: 'Quy m√¥ chƒÉn nu√¥i',
                        data: [3, 2, 3, 1],
                        backgroundColor: '#42a5f5',
                    }]
                },
                options: {
                    plugins: {
                        legend: { display: false },
                        title: { display: true, text: 'Quy m√¥ chƒÉn nu√¥i', font: { size: 16 } }
                    },
                    scales: { y: { beginAtZero: true } }
                }
            });
            new Chart(document.getElementById('livestockChart2').getContext('2d'), {
                type: 'bar',
                data: {
                    labels: ['Th·ªãt gia s√∫c', 'Th·ªãt gia c·∫ßm', 'S·∫£n l∆∞·ª£ng tr·ª©ng', 'S·∫£n l∆∞·ª£ng s·ªØa'],
                    datasets: [{
                        label: 'S·∫£n l∆∞·ª£ng s·∫£n ph·∫©m ƒë·ªông v·∫≠t',
                        data: [5, 2, 3, 1],
                        backgroundColor: '#66bb6a',
                    }]
                },
                options: {
                    plugins: {
                        legend: { display: false },
                        title: { display: true, text: 'S·∫£n l∆∞·ª£ng s·∫£n ph·∫©m ƒë·ªông v·∫≠t', font: { size: 16 } }
                    },
                    scales: { y: { beginAtZero: true } }
                }
            });
        }, 100);
    } else if (tabType === 'quality') {
        let appendUrl = false;
        let url = QLCL_REPORT_API + '?';
        if(province != null){
            url += `province=${province}`;
            appendUrl= true;
        }
        if(ward != null){
            if(appendUrl){
                url += '&';
            }
            url += `ward=${ward}`;
            appendUrl= true;
        }
        if(fromDate != null){
            if(appendUrl){
                url += '&';
            }
            url += `fromDate=${fromDate}`;
            appendUrl= true;
        }
        if(toDate != null){
            if(appendUrl){
                url += '&';
            }
            url += `toDate=${toDate}`;
        }
        console.log(url);
        const response = await fetch(url, {
            method: 'GET',
            headers: getApiHeaders(),
        });

        const data = await response.json();

        const dataReport = data.data.length > 0 ? data.data[0] : null;

        if (dataReport) {
            subContent.innerHTML = `
            <div class="dashboard-cards-row">
                <div class="dashboard-card quality"><div class="card-title">S·ªë doanh nghi·ªáp s·∫£n xu·∫•t kinh doanh</div><div class="card-value">${dataReport.so_luong_co_so}</div></div>
                <div class="dashboard-card quality"><div class="card-title">C∆° s·ªü ƒë·∫°t ch·ª©ng nh·∫≠n</div><div class="card-value">${dataReport.so_luong_co_so_dat_chung_nhan}</div></div>
                <div class="dashboard-card quality"><div class="card-title">S·ªë v·ª• vi ph·∫°m</div><div class="card-value">${dataReport.so_luong_vu_vi_pham}</div></div>
                <div class="dashboard-card quality"><div class="card-title">S·ªë ƒë·ª£t ki·ªÉm tra</div><div class="card-value">${dataReport.so_dot_kiem_tra}</div></div>
            </div>
            <div class="dashboard-charts-row" style="display:flex;gap:24px;">
                <div style="flex:1;background:#fff;border-radius:12px;padding:18px;">
                    <canvas id="qualityChart1"></canvas>
                </div>
                <div style="flex:1;background:#fff;border-radius:12px;padding:18px;">
                    <canvas id="qualityChart2"></canvas>
                </div>
            </div>
            <div class="dashboard-table" style="margin-top:24px;background:#fff;border-radius:12px;padding:18px;">
                <div style="font-weight:600;font-size:1.1rem;margin-bottom:10px;">Danh S√°ch Ch·ª©ng Nh·∫≠n S·∫Øp H·∫øt H·∫°n</div>
                <table style="width:100%;border-collapse:collapse;">
                    <thead><tr style="background:#f8f9fa;"><th style="padding:8px 6px;text-align:left;">T√™n c∆° s·ªü</th><th>Lo·∫°i ch·ª©ng nh·∫≠n</th><th>Ng√†y h·∫øt h·∫°n</th><th>Tr·∫°ng th√°i</th></tr></thead>
                    <tbody>${dataReport.gcn_sap_het_han.map(x=> `
                    <tr><td>${x.name}</td><td>${x.so_giay_chung_nhan}</td><td>${x.ngay_het_hieu_luc}</td><td><span style="background:#4caf50;color:#fff;padding:3px 10px;border-radius:8px;font-size:0.95rem;">C√≤n l·∫°i ${x.so_ngay_con_lai} ng√†y</span></td></tr>
                    `).join('')}
                    </tbody>
                </table>
            </div>`;
        }

        setTimeout(() => {
            new Chart(document.getElementById('qualityChart1').getContext('2d'), {
                type: 'bar',
                data: {
                    labels: dataReport ? dataReport.loai_hinh_co_so.map(x=> x.name) :  ['C∆° s·ªü ch·∫ø bi·∫øn l√¢m s·∫£n', 'C∆° s·ªü ch·∫ø bi·∫øn th·ªßy s·∫£n', 'C∆° s·ªü ch·∫ø bi·∫øn t·ªïng h·ª£p'],
                    datasets: [{
                        label: 'S·ªë l∆∞·ª£t ki·ªÉm tra theo th√°ng',
                        data: dataReport ? dataReport.loai_hinh_co_so.map(x=> x.so_luong_co_so) :   [2, 1, 12],
                        backgroundColor: '#2196f3',
                    }]
                },
                options: {
                    plugins: {
                        legend: { display: false },
                        title: { display: true, text: 'S·ªë l∆∞·ª£t ki·ªÉm tra theo th√°ng', font: { size: 16 } }
                    },
                    scales: { y: { beginAtZero: true } }
                }
            });
            new Chart(document.getElementById('qualityChart2').getContext('2d'), {
                type: 'line',
                data: {
                    labels: ['Th√°ng 1', 'Th√°ng 2', 'Th√°ng 3', 'Th√°ng 4', 'Th√°ng 5', 'Th√°ng 6', 'Th√°ng 7', 'Th√°ng 8', 'Th√°ng 9', 'Th√°ng 10', 'Th√°ng 11', 'Th√°ng 12'],
                    datasets: [{
                        label: 'S·ªë l∆∞·ª£t ki·ªÉm tra theo th√°ng',
                        data: dataReport ? [
                                dataReport.so_dot_kiem_tra_theo_thang[0].t1,
                                dataReport.so_dot_kiem_tra_theo_thang[0].t2,
                                dataReport.so_dot_kiem_tra_theo_thang[0].t3,
                                dataReport.so_dot_kiem_tra_theo_thang[0].t4,
                                dataReport.so_dot_kiem_tra_theo_thang[0].t5,
                                dataReport.so_dot_kiem_tra_theo_thang[0].t6,
                                dataReport.so_dot_kiem_tra_theo_thang[0].t7,
                                dataReport.so_dot_kiem_tra_theo_thang[0].t8,
                                dataReport.so_dot_kiem_tra_theo_thang[0].t9,
                                dataReport.so_dot_kiem_tra_theo_thang[0].t10,
                                dataReport.so_dot_kiem_tra_theo_thang[0].t11,
                                dataReport.so_dot_kiem_tra_theo_thang[0].t12
                            ] : [0,0,0,0,1,1,1,0,0,0,0,0],
                        borderColor: '#3f51b5',
                        backgroundColor: 'rgba(63,81,181,0.1)',
                        fill: true,
                        tension: 0.4
                    }]
                },
                options: {
                    plugins: {
                        legend: { display: false },
                        title: { display: true, text: 'S·ªë l∆∞·ª£t ki·ªÉm tra theo th√°ng', font: { size: 16 } }
                    },
                    scales: { y: { beginAtZero: true } }
                }
            });
        }, 100);
    }
}

// Setup tab events
function setupTabEvents() {
    const tabItems = document.querySelectorAll('.tab-item');
    tabItems.forEach(tab => {
        tab.addEventListener('click', function() {
            tabItems.forEach(t => t.classList.remove('active'));
            this.classList.add('active');
            const tabType = this.getAttribute('data-tab');
            showDashboardFakeData(tabType);
            loadDashboardData(tabType);
        });
    });
}

// Khi ƒë·ªïi t·ªânh/th√†nh, c·∫≠p nh·∫≠t l·∫°i fake data dashboard
provinceSelect.addEventListener('change', function() {
    const activeTab = document.querySelector('.tab-item.active');
    if (activeTab) {
        showDashboardFakeData(activeTab.getAttribute('data-tab'));
    }
});

// Khi trang load, hi·ªÉn th·ªã fake data cho tab ƒë·∫ßu ti√™n
window.addEventListener('DOMContentLoaded', function() {
    const firstTab = document.querySelector('.tab-item.active');
    if (firstTab) {
        showDashboardFakeData(firstTab.getAttribute('data-tab'));
    }
});

// Load dashboard data based on tab
function loadDashboardData() {
    const activeTab = document.querySelector('.tab-item.active');
    if (activeTab) {
        showDashboardFakeData(activeTab.getAttribute('data-tab'));
    }

}

// Load modules from API with fallback to sample data
async function loadModules() {
    showLoading();
    
    try {
        // Try to fetch from API first
        const response = await fetch(API_URL, {
            method: 'GET',
            mode: 'cors',
            headers: getApiHeaders()
        });
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        
        if (data && data.data && Array.isArray(data.data)) {
            displayModules(data.data);
            console.log('‚úÖ D·ªØ li·ªáu ƒë∆∞·ª£c load t·ª´ API th√†nh c√¥ng');
        } else {
            throw new Error('Invalid data format from API');
        }
        
    } catch (error) {
        console.warn('‚ö†Ô∏è Kh√¥ng th·ªÉ k·∫øt n·ªëi API, s·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u:', error.message);
        
        // Check if it's a CORS error
        const isCorsError = error.message.includes('CORS') || 
                           error.message.includes('Access-Control-Allow-Origin') ||
                           error.message.includes('preflight');
        
        // Fallback to sample data
        try {
            displayModules(SAMPLE_DATA.data);
            console.log('‚úÖ ƒê√£ s·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u');
            
            // Show specific message for CORS error
            if (isCorsError) {
                const tokenStatus = isTokenConfigured() ? 'Token ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh' : 'Ch∆∞a c·∫•u h√¨nh token';
                showInfoMessage(`‚ö†Ô∏è L·ªói CORS: Kh√¥ng th·ªÉ k·∫øt n·ªëi API t·ª´ domain hi·ªán t·∫°i. ${tokenStatus}. ƒêang s·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u. Vui l√≤ng li√™n h·ªá admin ƒë·ªÉ c·∫•u h√¨nh CORS ho·∫∑c ch·∫°y tr√™n domain ƒë∆∞·ª£c ph√©p.`);
            } else {
                showInfoMessage('‚ö†Ô∏è Kh√¥ng th·ªÉ k·∫øt n·ªëi API. ƒêang s·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng ho·∫∑c ch·∫°y tr√™n server.');
            }
            
        } catch (fallbackError) {
            console.error('‚ùå L·ªói khi load d·ªØ li·ªáu m·∫´u:', fallbackError);
            showError();
        }
    }
}

// Load provinces from API
async function loadProvinces() {
    try {
        const response = await fetch(PROVINCES_API, {
            method: 'GET',
            mode: 'cors',
            headers: getApiHeaders()
        });
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        
        if (data && data.data && Array.isArray(data.data)) {
            populateProvinceSelect(data.data);
            console.log('‚úÖ D·ªØ li·ªáu t·ªânh th√†nh ƒë∆∞·ª£c load t·ª´ API th√†nh c√¥ng');
        } else {
            throw new Error('Invalid provinces data format');
        }
        
    } catch (error) {
        console.warn('‚ö†Ô∏è Kh√¥ng th·ªÉ k·∫øt n·ªëi API t·ªânh th√†nh, s·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u:', error.message);
        
        // Check if it's a CORS error
        const isCorsError = error.message.includes('CORS') || 
                           error.message.includes('Access-Control-Allow-Origin') ||
                           error.message.includes('preflight');
        
        if (isCorsError) {
            console.log('üîí L·ªói CORS khi load t·ªânh th√†nh - s·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u');
        }
        
        // Use sample provinces data
        const sampleProvinces = [
            { id: 1, name: 'Qu·∫£ng Tr·ªã' },
            { id: 2, name: 'Th·ª´a Thi√™n Hu·∫ø' },
            { id: 3, name: 'Qu·∫£ng B√¨nh' },
            { id: 4, name: 'Qu·∫£ng Nam' },
            { id: 5, name: 'ƒê√† N·∫µng' }
        ];
        populateProvinceSelect(sampleProvinces);
    }
}

// Load wards from API
async function loadWards(provinceId) {
    try {
        const response = await fetch(`${WARDS_API}?filter[ProvinceId][_eq]=${provinceId}`, {
            method: 'GET',
            mode: 'cors',
            headers: getApiHeaders()
        });
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        
        if (data && data.data && Array.isArray(data.data)) {
            populateWardSelect(data.data);
            console.log('‚úÖ D·ªØ li·ªáu ph∆∞·ªùng x√£ ƒë∆∞·ª£c load t·ª´ API th√†nh c√¥ng');
        } else {
            throw new Error('Invalid wards data format');
        }
        
    } catch (error) {
        console.warn('‚ö†Ô∏è Kh√¥ng th·ªÉ k·∫øt n·ªëi API ph∆∞·ªùng x√£, s·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u:', error.message);
        
        // Check if it's a CORS error
        const isCorsError = error.message.includes('CORS') || 
                           error.message.includes('Access-Control-Allow-Origin') ||
                           error.message.includes('preflight');
        
        if (isCorsError) {
            console.log('üîí L·ªói CORS khi load ph∆∞·ªùng x√£ - s·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u');
        }
        
        // Use sample wards data
        const sampleWards = [
            { id: 1, name: 'Ph∆∞·ªùng 1' },
            { id: 2, name: 'Ph∆∞·ªùng 2' },
            { id: 3, name: 'Ph∆∞·ªùng 3' },
            { id: 4, name: 'X√£ A' },
            { id: 5, name: 'X√£ B' }
        ];
        populateWardSelect(sampleWards);
    }
}

// Populate ward select
function populateWardSelect(wards) {
    wardSelect.innerHTML = '<option value="">Ch·ªçn ph∆∞·ªùng/x√£</option>';
    wards.forEach(ward => {
        const option = document.createElement('option');
        option.value = ward.id;
        option.textContent = ward.name;
        option.setAttribute('data-code', ward.code || '');
        wardSelect.appendChild(option);
    });
    
    wardSelect.disabled = false;
}

// Reset ward select
function resetWardSelect() {
    wardSelect.innerHTML = '<option value="">Ch·ªçn ph∆∞·ªùng/x√£</option>';
    wardSelect.disabled = true;
}

// Display modules in the grid
function displayModules(modules) {
    hideLoading();
    hideError();
    
    modulesContainerElement.innerHTML = '';
    
    modules.forEach(module => {
        const moduleCard = createModuleCard(module);
        modulesContainerElement.appendChild(moduleCard);
    });
    
    showModulesGrid();
}

// Create a module card element
function createModuleCard(module) {
    const card = document.createElement('div');
    card.className = 'module-card';
    card.setAttribute('data-module-id', module.id);
    card.setAttribute('data-url', module.App_Url);

    const iconClass = moduleIcons[module.Name] || 'fas fa-database';

    card.innerHTML = `
        <div class="module-header">
            <div class="module-icon">
                <i class="${iconClass}"></i>
            </div>
            <h3 class="module-title">${module.Name}</h3>
        </div>
        <div class="module-description">
            ${truncateText(module.Note || 'Kh√¥ng c√≥ m√¥ t·∫£', 150)}
        </div>
    `;

    // Add click event for entire card
    card.addEventListener('click', function() {
        const url = this.getAttribute('data-url');
        if (url) {
            // L∆∞u l·∫°i n·ªôi dung g·ªëc
            const originalContent = this.innerHTML;
            this.style.pointerEvents = 'none';
            this.innerHTML = `
                <div class="module-loading">
                    <i class="fas fa-spinner fa-spin"></i>
                    <p>ƒêang chuy·ªÉn h∆∞·ªõng...</p>
                </div>
            `;
            // M·ªü trang m·ªõi
            setTimeout(() => {
                window.open(url, '_blank');
                // Kh√¥i ph·ª•c l·∫°i n·ªôi dung g·ªëc sau khi m·ªü tab m·ªõi
                this.innerHTML = originalContent;
                this.style.pointerEvents = '';
            }, 500);
        }
    });

    return card;
}

// Show module details in modal
function showModuleDetails(moduleId) {
    // Find the module data
    const moduleCard = document.querySelector(`[data-module-id="${moduleId}"]`);
    if (!moduleCard) return;
    
    // Get module data from the card or store it globally
    // For now, we'll extract from the card content
    const moduleTitle = moduleCard.querySelector('.module-title').textContent;
    const moduleDescription = moduleCard.querySelector('.module-description').textContent;
    const moduleUrl = moduleCard.querySelector('.btn-primary').href;
    
    // Update modal content
    modalTitle.textContent = moduleTitle;
    modalDescription.textContent = moduleDescription;
    modalUrl.href = moduleUrl;
    
    // Show modal
    moduleModal.classList.remove('hidden');
    document.body.style.overflow = 'hidden';
}

// Close modal handler
function closeModalHandler() {
    moduleModal.classList.add('hidden');
    document.body.style.overflow = '';
}

// Utility functions
function truncateText(text, maxLength) {
    if (text.length <= maxLength) return text;
    return text.substring(0, maxLength) + '...';
}

function showLoading() {
    loadingElement.classList.remove('hidden');
    errorElement.classList.add('hidden');
    modulesGridElement.classList.add('hidden');
}

function hideLoading() {
    loadingElement.classList.add('hidden');
}

function showError() {
    loadingElement.classList.add('hidden');
    errorElement.classList.remove('hidden');
    modulesGridElement.classList.add('hidden');
}

function hideError() {
    errorElement.classList.add('hidden');
}

function showModulesGrid() {
    modulesGridElement.classList.remove('hidden');
}

// Add smooth scrolling for better UX
function smoothScrollTo(element) {
    element.scrollIntoView({
        behavior: 'smooth',
        block: 'start'
    });
}

// Add loading animation for external links
document.addEventListener('click', function(e) {
    if (e.target.closest('a[target="_blank"]')) {
        const link = e.target.closest('a[target="_blank"]');
        const originalText = link.innerHTML;
        
        link.innerHTML = '<i class="fas fa-spinner fa-spin"></i> ƒêang chuy·ªÉn h∆∞·ªõng...';
        link.style.pointerEvents = 'none';
        
        setTimeout(() => {
            link.innerHTML = originalText;
            link.style.pointerEvents = '';
        }, 2000);
    }
});

// Add search functionality (optional enhancement)
function addSearchFunctionality() {
    const searchInput = document.createElement('input');
    searchInput.type = 'text';
    searchInput.placeholder = 'T√¨m ki·∫øm ph√¢n h·ªá...';
    searchInput.className = 'search-input';
    
    const searchContainer = document.createElement('div');
    searchContainer.className = 'search-container';
    searchContainer.appendChild(searchInput);
    
    // Insert search before modules grid
    modulesGridElement.insertBefore(searchContainer, modulesGridElement.firstChild);
    
    // Add search functionality
    searchInput.addEventListener('input', function(e) {
        const searchTerm = e.target.value.toLowerCase();
        const moduleCards = document.querySelectorAll('.module-card');
        
        moduleCards.forEach(card => {
            const title = card.querySelector('.module-title').textContent.toLowerCase();
            const description = card.querySelector('.module-description').textContent.toLowerCase();
            
            if (title.includes(searchTerm) || description.includes(searchTerm)) {
                card.style.display = 'block';
            } else {
                card.style.display = 'none';
            }
        });
    });
}

// Initialize search functionality
// Uncomment the line below to enable search
// addSearchFunctionality();

// Add keyboard navigation
document.addEventListener('keydown', function(e) {
    if (e.key === 'Enter' && document.activeElement.classList.contains('module-card')) {
        document.activeElement.click();
    }
});

// Add focus management for accessibility
function setupFocusManagement() {
    const moduleCards = document.querySelectorAll('.module-card');
    
    moduleCards.forEach(card => {
        card.setAttribute('tabindex', '0');
        card.setAttribute('role', 'button');
        card.setAttribute('aria-label', `Truy c·∫≠p ${card.querySelector('.module-title').textContent}`);
    });
}

// Initialize focus management when modules are loaded
const originalDisplayModules = displayModules;
displayModules = function(modules) {
    originalDisplayModules(modules);
    setTimeout(setupFocusManagement, 100);
}; 

let dashboardChartInstance = null;

function renderDashboardChart(tabType, provinceName) {
    const ctx = document.getElementById('dashboardChart').getContext('2d');
    // X√≥a chart c≈© n·∫øu c√≥
    if (dashboardChartInstance) {
        dashboardChartInstance.destroy();
    }
    let chartConfig = {};
    // Fake data cho t·ª´ng lƒ©nh v·ª±c
    if (tabType === 'agriculture') {
        chartConfig = {
            type: 'doughnut',
            data: {
                labels: ['ƒê·ªông ƒë·∫•t', 'S√≥ng th·∫ßn', 'L≈© l·ª•t', 'H·∫°n h√°n', 'Phytophthora infestans', 'Leptosphaeria maculans', 'Xanthomonas oryzae', 'Plasmodiophora brassicae'],
                datasets: [{
                    data: [6.6, 4.0, 5.9, 18.2, 25.1, 35.0, 4.0, 1.2],
                    backgroundColor: ['#f66', '#6cf', '#fc6', '#6fc', '#a6f', '#ccc', '#f90', '#f9c'],
                }]
            },
            options: {
                plugins: {
                    legend: { position: 'bottom' },
                    title: { display: true, text: 'T·ªïng S·ªë Di·ªán T√≠ch (Ha) Thi·ªát H·∫°i Do Thi√™n Tai/Do D·ªãch B·ªánh', font: { size: 18 } }
                }
            }
        };
    } else if (tabType === 'forestry') {
        chartConfig = {
            type: 'pie',
            data: {
                labels: ['R·ª´ng ngo√†i quy ho·∫°ch', 'V∆∞·ªùn qu·ªëc gia', 'R·ª´ng s·∫£n xu·∫•t g·ªó l·ªõn', 'R·ª´ng ph√≤ng h·ªô'],
                datasets: [{
                    data: [35, 25, 20, 20],
                    backgroundColor: ['#4caf50', '#ff9800', '#2196f3', '#ffc107'],
                }]
            },
            options: {
                plugins: {
                    legend: { position: 'bottom' },
                    title: { display: true, text: 'T·ª∑ L·ªá Di·ªán T√≠ch R·ª´ng Theo M·ª•c ƒê√≠ch S·ª≠ D·ª•ng (HA)', font: { size: 18 } }
                }
            }
        };
    } else if (tabType === 'fishery') {
        chartConfig = {
            type: 'bar',
            data: {
                labels: ['C∆° s·ªü ch·∫ø bi·∫øn l√¢m s·∫£n', 'C∆° s·ªü ch·∫ø bi·∫øn th·ªßy s·∫£n', 'C∆° s·ªü ch·∫ø bi·∫øn t·ªïng h·ª£p', 'C∆° s·ªü ch·∫ø bi·∫øn th·ª±c ph·∫©m n√¥ng s·∫£n', 'C∆° s·ªü s·∫£n xu·∫•t n√¥ng s·∫£n', 'C∆° s·ªü s∆° ch·∫ø ban ƒë·∫ßu'],
                datasets: [{
                    label: 'S·ªë l∆∞·ª£t ki·ªÉm tra theo th√°ng',
                    data: [2, 1, 12, 0, 0, 0],
                    backgroundColor: '#4caf50',
                }]
            },
            options: {
                plugins: {
                    legend: { display: false },
                    title: { display: true, text: 'S·ªë l∆∞·ª£t ki·ªÉm tra theo th√°ng', font: { size: 18 } }
                },
                scales: {
                    y: { beginAtZero: true }
                }
            }
        };
    } else if (tabType === 'livestock') {
        chartConfig = {
            type: 'bar',
            data: {
                labels: ['N√¥ng h·ªô', 'Trang tr·∫°i nh·ªè', 'Trang tr·∫°i v·ª´a', 'Trang tr·∫°i l·ªõn'],
                datasets: [{
                    label: 'Quy m√¥ chƒÉn nu√¥i',
                    data: [3, 2, 3, 1],
                    backgroundColor: '#42a5f5',
                }]
            },
            options: {
                plugins: {
                    legend: { display: false },
                    title: { display: true, text: 'Quy m√¥ chƒÉn nu√¥i', font: { size: 18 } }
                },
                scales: {
                    y: { beginAtZero: true }
                }
            }
        };
    } else if (tabType === 'quality') {
        chartConfig = {
            type: 'bar',
            data: {
                labels: ['S·ªë doanh nghi·ªáp', 'C∆° s·ªü ƒë·∫°t ch·ª©ng nh·∫≠n', 'S·ªë v·ª• vi ph·∫°m', 'S·ªë ƒë·ª£t ki·ªÉm tra'],
                datasets: [{
                    label: 'Ch·∫•t l∆∞·ª£ng',
                    data: [13, 22, 9, 2],
                    backgroundColor: ['#2196f3', '#4caf50', '#f44336', '#ffc107'],
                }]
            },
            options: {
                plugins: {
                    legend: { display: false },
                    title: { display: true, text: 'Ch·ªâ s·ªë ch·∫•t l∆∞·ª£ng', font: { size: 18 } }
                },
                scales: {
                    y: { beginAtZero: true }
                }
            }
        };
    }
    dashboardChartInstance = new Chart(ctx, chartConfig);
} 